# Production Docker Compose Configuration
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # Production Backend Configuration
  backend:
    environment:
      ENVIRONMENT: production
      DEBUG: "False"
      CORS_ALLOW_ALL_ORIGINS: "False"
      # Database connection pooling for production
      DB_CONN_MAX_AGE: 600
      DB_CONN_HEALTH_CHECKS: "True"
      # Security hardening
      SECURE_SSL_REDIRECT: "True"
      SECURE_HSTS_SECONDS: 31536000
      SECURE_HSTS_INCLUDE_SUBDOMAINS: "True"
      SECURE_HSTS_PRELOAD: "True"
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Production Frontend Configuration
  frontend:
    environment:
      NODE_ENV: production
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Production Database Configuration
  postgres:
    environment:
      POSTGRES_HOST_AUTH_METHOD: md5  # Force password authentication
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # Production Milvus Configuration
  milvus:
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 15s
      retries: 10
      start_period: 90s

  # Production MinIO Configuration
  minio:
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Production Etcd Configuration
  etcd:
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Production Nginx Configuration
  nginx:
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

# Production-specific networks
networks:
  ai_catalogue_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16