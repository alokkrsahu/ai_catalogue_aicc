# Generated by Django 5.2.4 on 2025-08-17 14:45

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="DashboardIcon",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("description", models.TextField(blank=True)),
                (
                    "icon_class",
                    models.CharField(
                        choices=[
                            ("fa-user", "User"),
                            ("fa-users", "Users"),
                            ("fa-user-plus", "Add User"),
                            ("fa-user-minus", "Remove User"),
                            ("fa-user-shield", "User Security"),
                            ("fa-user-cog", "User Settings"),
                            ("fa-user-tie", "Professional User"),
                            ("fa-user-graduate", "Graduate/Student"),
                            ("fa-home", "Home"),
                            ("fa-tachometer-alt", "Dashboard"),
                            ("fa-bars", "Menu"),
                            ("fa-th", "Grid View"),
                            ("fa-list", "List View"),
                            ("fa-search", "Search"),
                            ("fa-filter", "Filter"),
                            ("fa-file", "File"),
                            ("fa-file-alt", "Text Document"),
                            ("fa-file-pdf", "PDF File"),
                            ("fa-file-excel", "Excel File"),
                            ("fa-file-word", "Word Document"),
                            ("fa-folder", "Folder"),
                            ("fa-folder-open", "Open Folder"),
                            ("fa-download", "Download"),
                            ("fa-upload", "Upload"),
                            ("fa-envelope", "Email"),
                            ("fa-phone", "Phone"),
                            ("fa-comments", "Comments"),
                            ("fa-comment-dots", "Chat"),
                            ("fa-bell", "Notifications"),
                            ("fa-cog", "Settings"),
                            ("fa-cogs", "Advanced Settings"),
                            ("fa-tools", "Tools"),
                            ("fa-wrench", "Configuration"),
                            ("fa-sliders-h", "Controls"),
                            ("fa-chart-bar", "Bar Chart"),
                            ("fa-chart-line", "Line Chart"),
                            ("fa-chart-pie", "Pie Chart"),
                            ("fa-analytics", "Analytics"),
                            ("fa-project-diagram", "Graph"),
                            ("fa-book", "Book"),
                            ("fa-graduation-cap", "Education"),
                            ("fa-university", "University"),
                            ("fa-chalkboard-teacher", "Teaching"),
                            ("fa-pencil-alt", "Edit/Write"),
                            ("fa-clipboard", "Clipboard"),
                            ("fa-briefcase", "Business"),
                            ("fa-dollar-sign", "Finance"),
                            ("fa-calculator", "Calculator"),
                            ("fa-balance-scale", "Balance"),
                            ("fa-handshake", "Partnership"),
                            ("fa-code", "Code"),
                            ("fa-laptop", "Laptop"),
                            ("fa-server", "Server"),
                            ("fa-database", "Database"),
                            ("fa-cloud", "Cloud"),
                            ("fa-robot", "AI/Automation"),
                            ("fa-microchip", "Technology"),
                            ("fa-shield-alt", "Security"),
                            ("fa-lock", "Locked"),
                            ("fa-unlock", "Unlocked"),
                            ("fa-key", "Access Key"),
                            ("fa-eye", "View"),
                            ("fa-eye-slash", "Hide"),
                            ("fa-play", "Play/Start"),
                            ("fa-pause", "Pause"),
                            ("fa-stop", "Stop"),
                            ("fa-sync-alt", "Refresh"),
                            ("fa-edit", "Edit"),
                            ("fa-trash", "Delete"),
                            ("fa-save", "Save"),
                            ("fa-copy", "Copy"),
                            ("fa-check", "Success/Complete"),
                            ("fa-times", "Error/Close"),
                            ("fa-exclamation-triangle", "Warning"),
                            ("fa-info-circle", "Information"),
                            ("fa-star", "Favorite/Rating"),
                            ("fa-heart", "Like/Favorite"),
                            ("fa-arrow-right", "Arrow Right"),
                            ("fa-arrow-left", "Arrow Left"),
                            ("fa-arrow-up", "Arrow Up"),
                            ("fa-arrow-down", "Arrow Down"),
                            ("fa-plus", "Add/Plus"),
                            ("fa-minus", "Remove/Minus"),
                            ("fa-calendar", "Calendar"),
                            ("fa-clock", "Time"),
                            ("fa-history", "History"),
                            ("fa-map", "Map"),
                            ("fa-map-marker-alt", "Location"),
                            ("fa-globe", "Global/World"),
                            ("fa-question-circle", "Help/Question"),
                            ("fa-lightbulb", "Idea/Innovation"),
                            ("fa-magic", "Magic/Special"),
                            ("fa-fire", "Hot/Trending"),
                        ],
                        default="fa-tachometer-alt",
                        help_text="Select an icon from the predefined FontAwesome icons",
                        max_length=50,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        choices=[
                            ("oxford-blue", "Oxford Blue (#002147)"),
                            ("oxford-blue-light", "Light Oxford Blue (#334e68)"),
                            ("oxford-blue-dark", "Dark Oxford Blue (#001122)"),
                            ("academic-gold", "Academic Gold (#FFD700)"),
                            ("antique-gold", "Antique Gold (#CD7F32)"),
                            ("burgundy", "Burgundy (#800020)"),
                            ("forest-green", "Forest Green (#228B22)"),
                            ("royal-purple", "Royal Purple (#663399)"),
                            ("crimson", "Crimson (#DC143C)"),
                            ("charcoal", "Charcoal Gray (#36454F)"),
                            ("slate", "Slate Gray (#708090)"),
                            ("pearl", "Pearl White (#F8F8FF)"),
                            ("cream", "Cream (#F5F5DC)"),
                            ("success", "Success Green (#10B981)"),
                            ("warning", "Warning Amber (#F59E0B)"),
                            ("error", "Error Red (#EF4444)"),
                            ("info", "Info Blue (#3B82F6)"),
                            ("emerald", "Emerald (#50C878)"),
                            ("sapphire", "Sapphire (#0F52BA)"),
                            ("ruby", "Ruby (#E0115F)"),
                            ("amber", "Amber (#FFBF00)"),
                            ("teal", "Teal (#008080)"),
                            ("indigo", "Indigo (#4B0082)"),
                            ("coral", "Coral (#FF7F50)"),
                            ("mint", "Mint (#98FB98)"),
                        ],
                        default="oxford-blue",
                        help_text="Select a color theme that fits Oxford University branding",
                        max_length=20,
                    ),
                ),
                (
                    "route",
                    models.CharField(
                        help_text="Route to navigate to when icon is clicked",
                        max_length=100,
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0, help_text="Display order on dashboard"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="LLMProvider",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Provider display name (e.g., 'OpenAI')",
                        max_length=50,
                    ),
                ),
                (
                    "provider_type",
                    models.CharField(
                        choices=[
                            ("openai", "OpenAI"),
                            ("gemini", "Google Gemini"),
                            ("claude", "Anthropic Claude"),
                            ("huggingface", "Hugging Face"),
                        ],
                        max_length=20,
                        unique=True,
                    ),
                ),
                ("api_endpoint", models.URLField()),
                ("is_active", models.BooleanField(default=True)),
                ("max_tokens", models.IntegerField(default=1000)),
                ("timeout_seconds", models.IntegerField(default=30)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("first_name", models.CharField(blank=True, max_length=30)),
                ("last_name", models.CharField(blank=True, max_length=30)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "date_joined",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("ADMIN", "Admin"),
                            ("STAFF", "Staff"),
                            ("USER", "Regular User"),
                        ],
                        default="USER",
                        max_length=20,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="GroupIconPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("granted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "granted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="granted_group_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="auth.group"
                    ),
                ),
                (
                    "icon",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.dashboardicon",
                    ),
                ),
            ],
            options={
                "unique_together": {("group", "icon")},
            },
        ),
        migrations.AddField(
            model_name="dashboardicon",
            name="authorized_groups",
            field=models.ManyToManyField(
                related_name="accessible_icons",
                through="users.GroupIconPermission",
                through_fields=("icon", "group"),
                to="auth.group",
            ),
        ),
        migrations.CreateModel(
            name="GroupProjectPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("granted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "granted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="granted_group_project_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="project_permissions",
                        to="auth.group",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="IntelliDocProject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "project_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "has_navigation",
                    models.BooleanField(
                        default=False,
                        help_text="Enable multi-page navigation for this project",
                    ),
                ),
                ("template_name", models.CharField(blank=True, max_length=100)),
                ("template_type", models.CharField(blank=True, max_length=20)),
                ("template_description", models.TextField(blank=True)),
                ("instructions", models.TextField(blank=True)),
                ("suggested_questions", models.JSONField(default=list)),
                ("required_fields", models.JSONField(default=list)),
                ("analysis_focus", models.TextField(blank=True)),
                ("icon_class", models.CharField(default="fa-file-alt", max_length=50)),
                ("color_theme", models.CharField(default="oxford-blue", max_length=20)),
                (
                    "total_pages",
                    models.IntegerField(
                        default=1, help_text="Total number of navigation pages"
                    ),
                ),
                (
                    "navigation_pages",
                    models.JSONField(
                        default=list, help_text="Complete navigation configuration"
                    ),
                ),
                (
                    "processing_capabilities",
                    models.JSONField(
                        default=dict, help_text="Processing capabilities configuration"
                    ),
                ),
                (
                    "validation_rules",
                    models.JSONField(
                        default=dict, help_text="Validation rules configuration"
                    ),
                ),
                (
                    "ui_configuration",
                    models.JSONField(
                        default=dict, help_text="UI configuration settings"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "authorized_groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="accessible_projects",
                        through="users.GroupProjectPermission",
                        through_fields=("project", "group"),
                        to="auth.group",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="intellidoc_projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="groupprojectpermission",
            name="project",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="group_permissions",
                to="users.intellidocproject",
            ),
        ),
        migrations.CreateModel(
            name="AgentWorkflow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("workflow_id", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "graph_json",
                    models.JSONField(
                        help_text="Visual graph representation with nodes and edges"
                    ),
                ),
                ("version", models.CharField(default="1.0.0", max_length=20)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("validated", "Validated"),
                            ("active", "Active"),
                            ("archived", "Archived"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                (
                    "custom_config",
                    models.JSONField(
                        default=dict,
                        help_text="Custom orchestration configuration and metadata",
                    ),
                ),
                (
                    "supports_rag",
                    models.BooleanField(
                        default=False,
                        help_text="Whether workflow uses document-aware agents",
                    ),
                ),
                (
                    "vector_collections",
                    models.JSONField(
                        default=list,
                        help_text="Milvus collections for RAG-enabled agents",
                    ),
                ),
                (
                    "generated_code",
                    models.TextField(
                        blank=True,
                        help_text="Generated orchestration code for execution",
                    ),
                ),
                (
                    "code_generation_timestamp",
                    models.DateTimeField(
                        blank=True,
                        help_text="When orchestration code was last generated",
                        null=True,
                    ),
                ),
                ("total_executions", models.IntegerField(default=0)),
                ("successful_executions", models.IntegerField(default=0)),
                (
                    "average_execution_time",
                    models.FloatField(
                        blank=True,
                        help_text="Average execution time in seconds",
                        null=True,
                    ),
                ),
                ("max_agents_limit", models.IntegerField(default=10)),
                ("supports_function_tools", models.BooleanField(default=True)),
                ("supports_real_time_streaming", models.BooleanField(default=True)),
                ("sandbox_execution_enabled", models.BooleanField(default=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("last_executed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="agent_workflows",
                        to="users.intellidocproject",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="LLMComparison",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("prompt", models.TextField()),
                ("title", models.CharField(blank=True, max_length=200)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="APIKeyConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "key_name",
                    models.CharField(
                        help_text="Descriptive name for this API key", max_length=100
                    ),
                ),
                ("api_key", models.TextField(help_text="Encrypted API key")),
                (
                    "usage_limit_daily",
                    models.IntegerField(
                        blank=True, help_text="Daily request limit", null=True
                    ),
                ),
                ("usage_count_today", models.IntegerField(default=0)),
                ("last_reset_date", models.DateField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.llmprovider",
                    ),
                ),
            ],
            options={
                "ordering": ["provider", "key_name"],
            },
        ),
        migrations.CreateModel(
            name="LLMResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model_name", models.CharField(max_length=100)),
                ("response_text", models.TextField(blank=True)),
                (
                    "response_time_ms",
                    models.IntegerField(help_text="Response time in milliseconds"),
                ),
                ("token_count", models.IntegerField(blank=True, null=True)),
                (
                    "cost_estimate",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=10, null=True
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "comparison",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responses",
                        to="users.llmcomparison",
                    ),
                ),
                (
                    "provider",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.llmprovider",
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="ProjectAPIKey",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "provider_type",
                    models.CharField(
                        choices=[
                            ("openai", "OpenAI"),
                            ("google", "Google (Gemini)"),
                            ("anthropic", "Anthropic (Claude)"),
                        ],
                        help_text="API provider type",
                        max_length=20,
                    ),
                ),
                (
                    "encrypted_api_key",
                    models.TextField(
                        help_text="Encrypted API key using project-specific encryption"
                    ),
                ),
                (
                    "key_name",
                    models.CharField(
                        blank=True,
                        help_text="Optional descriptive name for the key (e.g., 'Production Key')",
                        max_length=100,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this key is active and should be used",
                    ),
                ),
                (
                    "is_validated",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this key has been validated with the provider",
                    ),
                ),
                (
                    "validation_error",
                    models.TextField(
                        blank=True, help_text="Last validation error message, if any"
                    ),
                ),
                (
                    "last_validated_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the key was last validated",
                        null=True,
                    ),
                ),
                (
                    "usage_count",
                    models.IntegerField(
                        default=0, help_text="Number of times this key has been used"
                    ),
                ),
                (
                    "last_used_at",
                    models.DateTimeField(
                        blank=True, help_text="When the key was last used", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who added this API key",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_keys",
                        to="users.intellidocproject",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="ProjectDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "document_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                ("original_filename", models.CharField(max_length=255)),
                ("file_path", models.CharField(max_length=500)),
                ("file_size", models.BigIntegerField()),
                ("file_type", models.CharField(max_length=100)),
                ("file_extension", models.CharField(max_length=10)),
                (
                    "upload_status",
                    models.CharField(
                        choices=[
                            ("uploading", "Uploading"),
                            ("processing", "Processing"),
                            ("ready", "Ready"),
                            ("error", "Error"),
                        ],
                        default="uploading",
                        max_length=20,
                    ),
                ),
                ("analysis_results", models.JSONField(blank=True, default=dict)),
                ("extraction_text", models.TextField(blank=True)),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="documents",
                        to="users.intellidocproject",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-uploaded_at"],
            },
        ),
        migrations.CreateModel(
            name="DocumentVectorStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                (
                    "vector_id",
                    models.CharField(
                        blank=True, help_text="Milvus vector ID", max_length=100
                    ),
                ),
                ("content_length", models.IntegerField(default=0)),
                ("embedding_dimension", models.IntegerField(default=384)),
                ("processing_time_ms", models.IntegerField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "summary_generated",
                    models.BooleanField(
                        default=False,
                        help_text="Whether summary has been generated for this document",
                    ),
                ),
                (
                    "summary_generated_at",
                    models.DateTimeField(
                        blank=True, help_text="When summary was generated", null=True
                    ),
                ),
                (
                    "summary_chunks_count",
                    models.IntegerField(
                        default=0, help_text="Number of chunks with summaries"
                    ),
                ),
                (
                    "topic_generated",
                    models.BooleanField(
                        default=False,
                        help_text="Whether topics have been generated for this document",
                    ),
                ),
                (
                    "topic_generated_at",
                    models.DateTimeField(
                        blank=True, help_text="When topics were generated", null=True
                    ),
                ),
                (
                    "topic_chunks_count",
                    models.IntegerField(
                        default=0, help_text="Number of chunks with topics"
                    ),
                ),
                (
                    "summarizer_used",
                    models.CharField(
                        default="none",
                        help_text="Which summarizer was used (openai_gpt, simple, none)",
                        max_length=50,
                    ),
                ),
                (
                    "topic_generator_used",
                    models.CharField(
                        default="none",
                        help_text="Which topic generator was used (openai_gpt, simple, none)",
                        max_length=50,
                    ),
                ),
                (
                    "document",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vector_status",
                        to="users.projectdocument",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="DocumentChunk",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "chunk_id",
                    models.CharField(
                        help_text="Unique chunk identifier", max_length=100, unique=True
                    ),
                ),
                (
                    "chunk_index",
                    models.IntegerField(help_text="Order of chunk within document"),
                ),
                (
                    "chunk_type",
                    models.CharField(
                        default="content",
                        help_text="Type of chunk (content, header, section, etc.)",
                        max_length=50,
                    ),
                ),
                (
                    "section_title",
                    models.CharField(
                        blank=True, help_text="Section title or heading", max_length=500
                    ),
                ),
                (
                    "content_length",
                    models.IntegerField(
                        default=0, help_text="Length of chunk content in characters"
                    ),
                ),
                (
                    "has_embedding",
                    models.BooleanField(
                        default=False, help_text="Whether chunk has vector embedding"
                    ),
                ),
                (
                    "vector_id",
                    models.CharField(
                        blank=True,
                        help_text="Vector database ID for this chunk",
                        max_length=100,
                    ),
                ),
                (
                    "has_summary",
                    models.BooleanField(
                        default=False, help_text="Whether chunk has generated summary"
                    ),
                ),
                (
                    "summary_word_count",
                    models.IntegerField(
                        default=0, help_text="Word count of generated summary"
                    ),
                ),
                ("summary_generated_at", models.DateTimeField(blank=True, null=True)),
                ("summarizer_used", models.CharField(default="none", max_length=50)),
                (
                    "has_topic",
                    models.BooleanField(
                        default=False, help_text="Whether chunk has generated topic"
                    ),
                ),
                (
                    "topic_word_count",
                    models.IntegerField(
                        default=0, help_text="Word count of generated topic"
                    ),
                ),
                ("topic_generated_at", models.DateTimeField(blank=True, null=True)),
                (
                    "topic_generator_used",
                    models.CharField(default="none", max_length=50),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "vector_status",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chunks",
                        to="users.documentvectorstatus",
                    ),
                ),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chunks",
                        to="users.projectdocument",
                    ),
                ),
            ],
            options={
                "ordering": ["document", "chunk_index"],
            },
        ),
        migrations.CreateModel(
            name="ProjectVectorCollection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("collection_name", models.CharField(max_length=100, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                        ],
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                ("total_documents", models.IntegerField(default=0)),
                ("processed_documents", models.IntegerField(default=0)),
                ("failed_documents", models.IntegerField(default=0)),
                ("last_processed_at", models.DateTimeField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "project",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vector_collection",
                        to="users.intellidocproject",
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
            },
        ),
        migrations.AddField(
            model_name="documentvectorstatus",
            name="collection",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="document_statuses",
                to="users.projectvectorcollection",
            ),
        ),
        migrations.CreateModel(
            name="SimulationRun",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("run_id", models.UUIDField(default=uuid.uuid4, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("stopped", "Stopped"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("start_time", models.DateTimeField(auto_now_add=True)),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                ("duration_seconds", models.FloatField(blank=True, null=True)),
                (
                    "graph_snapshot",
                    models.JSONField(help_text="Graph state at execution time"),
                ),
                (
                    "execution_parameters",
                    models.JSONField(
                        default=dict, help_text="Runtime parameters and settings"
                    ),
                ),
                ("result_summary", models.TextField(blank=True)),
                ("error_message", models.TextField(blank=True)),
                ("error_traceback", models.TextField(blank=True)),
                ("total_messages", models.IntegerField(default=0)),
                ("total_agents_involved", models.IntegerField(default=0)),
                ("average_response_time", models.FloatField(blank=True, null=True)),
                ("celery_task_id", models.CharField(blank=True, max_length=100)),
                (
                    "execution_environment",
                    models.CharField(default="production", max_length=50),
                ),
                (
                    "executed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workflow",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="simulation_runs",
                        to="users.agentworkflow",
                    ),
                ),
            ],
            options={
                "ordering": ["-start_time"],
            },
        ),
        migrations.CreateModel(
            name="AgentMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message_id", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("agent_name", models.CharField(max_length=100)),
                ("agent_type", models.CharField(default="unknown", max_length=50)),
                ("content", models.TextField()),
                (
                    "message_type",
                    models.CharField(
                        choices=[
                            ("chat", "Chat Message"),
                            ("system", "System Message"),
                            ("function_call", "Function Call"),
                            ("function_result", "Function Result"),
                            ("error", "Error Message"),
                            ("status", "Status Update"),
                            ("user_input", "User Input"),
                            ("workflow_start", "Workflow Start"),
                            ("workflow_end", "Workflow End"),
                        ],
                        default="chat",
                        max_length=20,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "sequence_number",
                    models.IntegerField(help_text="Message order in conversation"),
                ),
                (
                    "parent_message_id",
                    models.UUIDField(
                        blank=True, help_text="Reference to parent message", null=True
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        default=dict, help_text="Additional message metadata"
                    ),
                ),
                (
                    "function_name",
                    models.CharField(
                        blank=True,
                        help_text="Function name for function calls",
                        max_length=100,
                    ),
                ),
                (
                    "function_arguments",
                    models.JSONField(
                        blank=True, help_text="Function call arguments", null=True
                    ),
                ),
                (
                    "function_result",
                    models.JSONField(
                        blank=True, help_text="Function execution result", null=True
                    ),
                ),
                ("response_time_ms", models.IntegerField(blank=True, null=True)),
                ("token_count", models.IntegerField(blank=True, null=True)),
                (
                    "run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="users.simulationrun",
                    ),
                ),
            ],
            options={
                "ordering": ["run", "sequence_number"],
            },
        ),
        migrations.CreateModel(
            name="UserIconPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("granted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "granted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="granted_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "icon",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.dashboardicon",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="dashboardicon",
            name="authorized_users",
            field=models.ManyToManyField(
                related_name="accessible_icons",
                through="users.UserIconPermission",
                through_fields=("icon", "user"),
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="UserProjectPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("granted_at", models.DateTimeField(auto_now_add=True)),
                (
                    "granted_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="granted_project_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_permissions",
                        to="users.intellidocproject",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="project_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="intellidocproject",
            name="authorized_users",
            field=models.ManyToManyField(
                blank=True,
                related_name="accessible_projects",
                through="users.UserProjectPermission",
                through_fields=("project", "user"),
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="WorkflowExecution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("execution_id", models.CharField(max_length=100, unique=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("stopped", "Stopped"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                ("duration_seconds", models.FloatField(blank=True, null=True)),
                ("total_messages", models.IntegerField(default=0)),
                ("total_agents_involved", models.IntegerField(default=0)),
                ("average_response_time_ms", models.FloatField(blank=True, null=True)),
                ("providers_used", models.JSONField(default=list)),
                ("conversation_history", models.TextField(blank=True)),
                ("result_summary", models.TextField(blank=True)),
                ("error_message", models.TextField(blank=True)),
                ("executed_nodes", models.JSONField(default=dict)),
                ("messages_data", models.JSONField(default=list)),
                (
                    "human_input_required",
                    models.BooleanField(
                        default=False,
                        help_text="Whether workflow is paused awaiting human input",
                    ),
                ),
                (
                    "awaiting_human_input_agent",
                    models.CharField(
                        blank=True,
                        help_text="Name of UserProxyAgent awaiting input",
                        max_length=100,
                    ),
                ),
                (
                    "human_input_prompt",
                    models.TextField(
                        blank=True, help_text="Prompt/context for human input interface"
                    ),
                ),
                (
                    "human_input_context",
                    models.JSONField(
                        default=dict,
                        help_text="Input context from connected agents for human interface",
                    ),
                ),
                (
                    "human_input_requested_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When human input was requested",
                        null=True,
                    ),
                ),
                (
                    "human_input_received_at",
                    models.DateTimeField(
                        blank=True, help_text="When human input was received", null=True
                    ),
                ),
                (
                    "human_input_agent_id",
                    models.CharField(
                        blank=True,
                        help_text="ID of UserProxyAgent node awaiting input",
                        max_length=100,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "executed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "workflow",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="executions",
                        to="users.agentworkflow",
                    ),
                ),
            ],
            options={
                "ordering": ["-start_time"],
            },
        ),
        migrations.CreateModel(
            name="HumanInputInteraction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "agent_name",
                    models.CharField(
                        help_text="Name of UserProxyAgent that requested input",
                        max_length=100,
                    ),
                ),
                (
                    "agent_id",
                    models.CharField(
                        help_text="Node ID of UserProxyAgent in workflow graph",
                        max_length=100,
                    ),
                ),
                (
                    "input_messages",
                    models.JSONField(
                        default=list,
                        help_text="Messages from agents connected to this UserProxyAgent",
                    ),
                ),
                (
                    "conversation_context",
                    models.TextField(
                        blank=True,
                        help_text="Full conversation history at time of human input request",
                    ),
                ),
                (
                    "aggregated_input_summary",
                    models.TextField(
                        blank=True,
                        help_text="Summary of all input sources for human review",
                    ),
                ),
                (
                    "human_response",
                    models.TextField(
                        help_text="The actual human input/response provided"
                    ),
                ),
                (
                    "response_timestamp",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When human submitted their response",
                    ),
                ),
                (
                    "response_time_seconds",
                    models.FloatField(
                        blank=True,
                        help_text="Time taken for human to respond",
                        null=True,
                    ),
                ),
                (
                    "requested_at",
                    models.DateTimeField(
                        help_text="When human input was initially requested"
                    ),
                ),
                (
                    "input_sources_count",
                    models.IntegerField(
                        default=0,
                        help_text="Number of connected agents that provided input",
                    ),
                ),
                (
                    "workflow_paused_at_sequence",
                    models.IntegerField(
                        default=0, help_text="Sequence number where workflow was paused"
                    ),
                ),
                (
                    "processed_successfully",
                    models.BooleanField(
                        default=True,
                        help_text="Whether human input was processed without errors",
                    ),
                ),
                (
                    "processing_error",
                    models.TextField(
                        blank=True, help_text="Error message if processing failed"
                    ),
                ),
                (
                    "workflow_resumed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether workflow was successfully resumed after input",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "execution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="human_inputs",
                        to="users.workflowexecution",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WorkflowExecutionMessage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("sequence", models.IntegerField()),
                ("agent_name", models.CharField(max_length=100)),
                ("agent_type", models.CharField(max_length=50)),
                ("content", models.TextField()),
                (
                    "message_type",
                    models.CharField(
                        choices=[
                            ("chat", "Chat"),
                            ("workflow_start", "Workflow Start"),
                            ("workflow_end", "Workflow End"),
                            ("system", "System"),
                            ("error", "Error"),
                        ],
                        default="chat",
                        max_length=20,
                    ),
                ),
                ("timestamp", models.DateTimeField()),
                ("response_time_ms", models.IntegerField(default=0)),
                ("token_count", models.IntegerField(blank=True, null=True)),
                ("metadata", models.JSONField(default=dict)),
                (
                    "execution",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="users.workflowexecution",
                    ),
                ),
            ],
            options={
                "ordering": ["execution", "sequence"],
            },
        ),
        migrations.CreateModel(
            name="WorkflowTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("template_id", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("category", models.CharField(default="general", max_length=100)),
                (
                    "graph_template",
                    models.JSONField(help_text="Template graph structure"),
                ),
                (
                    "default_parameters",
                    models.JSONField(
                        default=dict, help_text="Default parameters for template"
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether template is publicly available",
                    ),
                ),
                ("tags", models.JSONField(blank=True, default=list)),
                ("version", models.CharField(default="1.0.0", max_length=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("usage_count", models.IntegerField(default=0)),
                ("rating_average", models.FloatField(blank=True, null=True)),
                ("rating_count", models.IntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-updated_at"],
            },
        ),
        migrations.AddIndex(
            model_name="groupprojectpermission",
            index=models.Index(fields=["group"], name="users_group_group_i_c66bc9_idx"),
        ),
        migrations.AddIndex(
            model_name="groupprojectpermission",
            index=models.Index(
                fields=["project"], name="users_group_project_af743e_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="groupprojectpermission",
            unique_together={("group", "project")},
        ),
        migrations.AlterUniqueTogether(
            name="agentworkflow",
            unique_together={("project", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="apikeyconfig",
            unique_together={("provider", "key_name")},
        ),
        migrations.AddIndex(
            model_name="projectapikey",
            index=models.Index(
                fields=["project", "provider_type", "is_active"],
                name="users_proje_project_a5b079_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="projectapikey",
            index=models.Index(
                fields=["project", "is_active"], name="users_proje_project_8a887c_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="projectapikey",
            unique_together={("project", "provider_type")},
        ),
        migrations.AlterUniqueTogether(
            name="projectdocument",
            unique_together={("project", "original_filename")},
        ),
        migrations.AlterUniqueTogether(
            name="documentchunk",
            unique_together={("document", "chunk_index")},
        ),
        migrations.AlterUniqueTogether(
            name="documentvectorstatus",
            unique_together={("document", "collection")},
        ),
        migrations.AlterUniqueTogether(
            name="agentmessage",
            unique_together={("run", "sequence_number")},
        ),
        migrations.AlterUniqueTogether(
            name="usericonpermission",
            unique_together={("user", "icon")},
        ),
        migrations.AddIndex(
            model_name="userprojectpermission",
            index=models.Index(fields=["user"], name="users_userp_user_id_3f7621_idx"),
        ),
        migrations.AddIndex(
            model_name="userprojectpermission",
            index=models.Index(
                fields=["project"], name="users_userp_project_21726e_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userprojectpermission",
            unique_together={("user", "project")},
        ),
        migrations.AddIndex(
            model_name="humaninputinteraction",
            index=models.Index(
                fields=["execution", "agent_id"], name="users_human_executi_a36d40_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="humaninputinteraction",
            index=models.Index(
                fields=["requested_at"], name="users_human_request_1a5e72_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="humaninputinteraction",
            index=models.Index(
                fields=["response_timestamp"], name="users_human_respons_a5a1cc_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="workflowexecutionmessage",
            unique_together={("execution", "sequence")},
        ),
    ]
