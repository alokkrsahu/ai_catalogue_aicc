#!/usr/bin/env python3\n\"\"\"\nTest script to verify agent workflow API endpoints are working\n\"\"\"\n\nimport requests\nimport json\nimport sys\n\nBASE_URL = 'http://localhost:8000/api'\nPROJECT_ID = '68c8822f-0b2d-42aa-ae9c-cbf4571ee1f5'  # Your project ID\n\ndef test_workflow_endpoints():\n    \"\"\"Test the workflow API endpoints\"\"\"\n    \n    print(\"üß™ Testing Agent Workflow API Endpoints\")\n    print(\"=\" * 50)\n    \n    # Test data for creating a workflow\n    workflow_data = {\n        \"name\": \"Test Workflow\",\n        \"description\": \"Test agent orchestration workflow\",\n        \"graph_json\": {\n            \"nodes\": [\n                {\n                    \"id\": \"start_1\",\n                    \"type\": \"StartNode\",\n                    \"position\": {\"x\": 0, \"y\": 0},\n                    \"data\": {\n                        \"name\": \"Start\",\n                        \"label\": \"Start\",\n                        \"description\": \"Workflow starting point\",\n                        \"prompt\": \"Enter your initial prompt here...\"\n                    }\n                }\n            ],\n            \"edges\": []\n        },\n        \"status\": \"draft\"\n    }\n    \n    # Test 1: List workflows (should be empty initially)\n    print(\"1. Testing GET /workflows/ (list)\")\n    response = requests.get(f\"{BASE_URL}/projects/{PROJECT_ID}/workflows/\")\n    print(f\"   Status: {response.status_code}\")\n    if response.status_code == 200:\n        workflows = response.json()\n        print(f\"   Found {len(workflows)} existing workflows\")\n    else:\n        print(f\"   Error: {response.text}\")\n    \n    print()\n    \n    # Test 2: Create a new workflow\n    print(\"2. Testing POST /workflows/ (create)\")\n    response = requests.post(\n        f\"{BASE_URL}/projects/{PROJECT_ID}/workflows/\",\n        json=workflow_data,\n        headers={\"Content-Type\": \"application/json\"}\n    )\n    print(f\"   Status: {response.status_code}\")\n    if response.status_code == 201:\n        new_workflow = response.json()\n        workflow_id = new_workflow['workflow_id']\n        print(f\"   Created workflow: {new_workflow['name']} (ID: {workflow_id})\")\n        \n        # Test 3: Get specific workflow\n        print(\"\\n3. Testing GET /workflows/{id}/ (retrieve)\")\n        response = requests.get(f\"{BASE_URL}/projects/{PROJECT_ID}/workflows/{workflow_id}/\")\n        print(f\"   Status: {response.status_code}\")\n        if response.status_code == 200:\n            workflow = response.json()\n            print(f\"   Retrieved: {workflow['name']} with {workflow['node_count']} nodes\")\n        else:\n            print(f\"   Error: {response.text}\")\n        \n        # Test 4: Update workflow\n        print(\"\\n4. Testing PATCH /workflows/{id}/ (update)\")\n        update_data = {\"description\": \"Updated test workflow\"}\n        response = requests.patch(\n            f\"{BASE_URL}/projects/{PROJECT_ID}/workflows/{workflow_id}/\",\n            json=update_data,\n            headers={\"Content-Type\": \"application/json\"}\n        )\n        print(f\"   Status: {response.status_code}\")\n        if response.status_code == 200:\n            print(\"   Workflow updated successfully\")\n        else:\n            print(f\"   Error: {response.text}\")\n        \n        # Test 5: Validate workflow\n        print(\"\\n5. Testing POST /workflows/{id}/validate/\")\n        response = requests.post(f\"{BASE_URL}/projects/{PROJECT_ID}/workflows/{workflow_id}/validate/\")\n        print(f\"   Status: {response.status_code}\")\n        if response.status_code == 200:\n            validation = response.json()\n            print(f\"   Valid: {validation['valid']}, Warnings: {len(validation['warnings'])}\")\n        else:\n            print(f\"   Error: {response.text}\")\n        \n    else:\n        print(f\"   Error creating workflow: {response.text}\")\n        workflow_id = None\n    \n    print(\"\\n\" + \"=\" * 50)\n    print(\"‚úÖ Test completed!\")\n    \n    if workflow_id:\n        print(f\"\\nüí° You can now test the frontend with workflow ID: {workflow_id}\")\n\nif __name__ == \"__main__\":\n    try:\n        test_workflow_endpoints()\n    except requests.exceptions.ConnectionError:\n        print(\"‚ùå Error: Could not connect to backend server at http://localhost:8000\")\n        print(\"   Make sure the Django development server is running.\")\n        sys.exit(1)\n    except Exception as e:\n        print(f\"‚ùå Error: {e}\")\n        sys.exit(1)\n