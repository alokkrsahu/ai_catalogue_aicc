# Generated by Django 5.2.5 on 2025-08-21 16:09

import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ChatbotConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('daily_requests_per_ip', models.IntegerField(default=100)),
                ('hourly_requests_per_ip', models.IntegerField(default=20)),
                ('max_message_length', models.IntegerField(default=500)),
                ('max_search_results', models.IntegerField(default=5)),
                ('similarity_threshold', models.FloatField(default=0.7)),
                ('default_llm_provider', models.CharField(default='openai', max_length=50)),
                ('default_model', models.CharField(default='gpt-3.5-turbo', max_length=100)),
                ('max_response_tokens', models.IntegerField(default=300)),
                ('enable_security_scanning', models.BooleanField(default=True)),
                ('block_suspicious_ips', models.BooleanField(default=True)),
                ('log_full_conversations', models.BooleanField(default=False)),
                ('is_enabled', models.BooleanField(default=True, help_text='Global on/off switch')),
                ('maintenance_mode', models.BooleanField(default=False)),
                ('maintenance_message', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'verbose_name': 'Chatbot Configuration',
                'verbose_name_plural': 'Chatbot Configuration',
                'db_table': 'public_chatbot_config',
            },
        ),
        migrations.CreateModel(
            name='IPUsageLimit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(db_index=True, unique=True)),
                ('daily_request_count', models.IntegerField(default=0)),
                ('daily_token_usage', models.IntegerField(default=0)),
                ('last_reset_date', models.DateField(default=django.utils.timezone.now)),
                ('hourly_request_count', models.IntegerField(default=0)),
                ('last_hourly_reset', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_blocked', models.BooleanField(default=False)),
                ('blocked_until', models.DateTimeField(blank=True, null=True)),
                ('block_reason', models.CharField(blank=True, max_length=100)),
                ('total_requests', models.IntegerField(default=0)),
                ('successful_requests', models.IntegerField(default=0)),
                ('security_violations', models.IntegerField(default=0)),
                ('first_seen', models.DateTimeField(auto_now_add=True)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('country_code', models.CharField(blank=True, max_length=2)),
                ('user_agent_pattern', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'db_table': 'public_chatbot_ip_limits',
                'ordering': ['-last_seen'],
                'indexes': [models.Index(fields=['ip_address', 'is_blocked'], name='public_chat_ip_addr_f1437f_idx'), models.Index(fields=['last_reset_date', 'daily_request_count'], name='public_chat_last_re_5e5d98_idx'), models.Index(fields=['blocked_until'], name='public_chat_blocked_541b84_idx')],
            },
        ),
        migrations.CreateModel(
            name='PublicChatRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.CharField(db_index=True, max_length=50, unique=True)),
                ('session_id', models.CharField(blank=True, db_index=True, max_length=100)),
                ('ip_address', models.GenericIPAddressField(db_index=True)),
                ('user_agent', models.CharField(blank=True, max_length=300)),
                ('origin_domain', models.CharField(blank=True, max_length=200)),
                ('message_preview', models.CharField(help_text='Truncated message for logging (first 100 chars)', max_length=100, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(100)])),
                ('message_length', models.IntegerField(default=0)),
                ('message_hash', models.CharField(blank=True, max_length=64)),
                ('response_generated', models.BooleanField(default=False)),
                ('response_length', models.IntegerField(default=0)),
                ('response_time_ms', models.IntegerField(blank=True, null=True)),
                ('chroma_search_time_ms', models.IntegerField(blank=True, null=True)),
                ('chroma_results_found', models.IntegerField(default=0)),
                ('chroma_context_used', models.BooleanField(default=False)),
                ('llm_provider_used', models.CharField(blank=True, max_length=50)),
                ('llm_model_used', models.CharField(blank=True, max_length=100)),
                ('llm_tokens_used', models.IntegerField(default=0)),
                ('llm_cost_estimate', models.DecimalField(blank=True, decimal_places=6, max_digits=10, null=True)),
                ('status', models.CharField(choices=[('success', 'Success'), ('error', 'Error'), ('blocked', 'Blocked'), ('rate_limited', 'Rate Limited'), ('security_violation', 'Security Violation')], default='success', max_length=20)),
                ('error_type', models.CharField(blank=True, max_length=50)),
                ('error_message', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'public_chatbot_requests',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['ip_address', 'created_at'], name='public_chat_ip_addr_d9b234_idx'), models.Index(fields=['session_id', 'created_at'], name='public_chat_session_5d8384_idx'), models.Index(fields=['status', 'created_at'], name='public_chat_status_707fec_idx'), models.Index(fields=['llm_provider_used', 'created_at'], name='public_chat_llm_pro_3eef21_idx'), models.Index(fields=['origin_domain', 'created_at'], name='public_chat_origin__b12d95_idx')],
            },
        ),
        migrations.CreateModel(
            name='PublicKnowledgeDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_id', models.CharField(db_index=True, max_length=100, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('category', models.CharField(default='general', max_length=50)),
                ('subcategory', models.CharField(blank=True, max_length=50)),
                ('content', models.TextField(help_text='Full document content for ChromaDB')),
                ('content_preview', models.CharField(blank=True, max_length=300)),
                ('content_hash', models.CharField(blank=True, max_length=64)),
                ('is_approved', models.BooleanField(default=False, help_text='Admin approved for public use')),
                ('security_reviewed', models.BooleanField(default=False, help_text='Security review completed')),
                ('quality_score', models.IntegerField(default=0, help_text='Content quality (0-100)')),
                ('synced_to_chromadb', models.BooleanField(default=False)),
                ('chromadb_id', models.CharField(blank=True, max_length=100)),
                ('last_synced', models.DateTimeField(blank=True, null=True)),
                ('sync_error', models.TextField(blank=True)),
                ('search_count', models.IntegerField(default=0)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('source_url', models.URLField(blank=True, help_text='Original source if applicable')),
                ('language', models.CharField(default='en', max_length=10)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=500)),
                ('created_by', models.CharField(blank=True, max_length=100)),
                ('approved_by', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'public_chatbot_knowledge',
                'ordering': ['-updated_at'],
                'indexes': [models.Index(fields=['category', 'is_approved'], name='public_chat_categor_72376c_idx'), models.Index(fields=['is_approved', 'security_reviewed'], name='public_chat_is_appr_ba7df3_idx'), models.Index(fields=['synced_to_chromadb'], name='public_chat_synced__7aeff8_idx'), models.Index(fields=['search_count', 'last_used'], name='public_chat_search__345aca_idx')],
            },
        ),
    ]
