"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Fix tokenizer parallelism warning - set this BEFORE any imports
os.environ.setdefault('TOKENIZERS_PARALLELISM', 'false')

# Also fix other potential multiprocessing issues
os.environ.setdefault('PYTORCH_ENABLE_MPS_FALLBACK', '1')
os.environ.setdefault('CUDA_VISIBLE_DEVICES', '')

from datetime import timedelta



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-lb=q(rt4#!kjg!ckx@t)89-0jw4uidgk+9yq5b&c6&slk^2p#b')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,testserver,0.0.0.0').split(',')

# JWT Configuration
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('JWT_ACCESS_TOKEN_LIFETIME', '60'))),
    'REFRESH_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('JWT_REFRESH_TOKEN_LIFETIME', '1440'))),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'SIGNING_KEY': os.getenv('JWT_SECRET_KEY', SECRET_KEY),
    'ALGORITHM': os.getenv('JWT_ALGORITHM', 'HS256'),
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # CORS headers
    'corsheaders',
    
    # Your apps
    'users',
    'api',
    'templates',  # Add the Templates app
    'llm_eval',  # Add the LLM Eval app
    'vector_search',  # Add the Vector Search app
    'agent_orchestration',  # Add the Agent Orchestration app
    'django_milvus_search',  # Add the Django Milvus Search app
    'project_api_keys.apps.ProjectApiKeysConfig',  # Project-specific API key management
    'public_chatbot',  # Public Chatbot API (isolated from main system)
    
    # Third-party
    'rest_framework',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}


# Add this at the bottom of the file to use your custom User model
AUTH_USER_MODEL = 'users.User'


MIDDLEWARE = [
    # CORS middleware should be placed as high as possible
    'corsheaders.middleware.CorsMiddleware',
    
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS settings - Cloud-ready configuration
cors_origins = os.getenv('CORS_ALLOWED_ORIGINS', 'http://localhost:5173,http://localhost:3000')
CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins.split(',') if origin.strip()]

# For development, allow all origins if specified
CORS_ALLOW_ALL_ORIGINS = os.getenv('CORS_ALLOW_ALL_ORIGINS', 'False').lower() == 'true'

# Allow credentials (cookies, authorization headers)
CORS_ALLOW_CREDENTIALS = True

# CSRF settings for cloud deployment
csrf_origins = os.getenv('CSRF_TRUSTED_ORIGINS', 'http://localhost:5173,http://localhost:3000')
CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in csrf_origins.split(',') if origin.strip()]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.postgresql'),
        'NAME': os.getenv('DB_NAME', 'ai_catalogue_db'),
        'USER': os.getenv('DB_USER', 'ai_catalogue_user'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'ai_catalogue_password'),
        'HOST': os.getenv('DB_HOST', 'postgres'),
        'PORT': os.getenv('DB_PORT', '5432'),
        'OPTIONS': {
            'connect_timeout': int(os.getenv('DB_CONNECT_TIMEOUT', '60')),
            'sslmode': os.getenv('DB_SSL_MODE', 'prefer'),  # For cloud: require
        },
        'CONN_MAX_AGE': int(os.getenv('DB_CONN_MAX_AGE', '300')),  # Connection pooling
        'CONN_HEALTH_CHECKS': os.getenv('DB_CONN_HEALTH_CHECKS', 'True').lower() == 'true',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'users.User'

# LLM Eval App Settings
# IMPORTANT: Generate a secure encryption key for API keys
# You can generate one by running: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
API_KEY_ENCRYPTION_KEY = 'BvAnyMC4-7_2oomBc_PT5lfmZN_LGisAdcvSF1EOAPQ='

# Project-Specific API Key Management Settings
PROJECT_API_KEY_SETTINGS = {
    'ENCRYPTION_KEY': os.getenv('PROJECT_API_KEY_ENCRYPTION_KEY', API_KEY_ENCRYPTION_KEY),  # Fallback to legacy key
    'VALIDATION_ENABLED': True,
    'VALIDATION_TIMEOUT': 10,  # seconds
    'USAGE_TRACKING': True,
}

# Milvus Vector Database Settings
MILVUS_HOST = os.getenv('MILVUS_HOST')
MILVUS_PORT = os.getenv('MILVUS_PORT')
MILVUS_USER = os.getenv('MILVUS_ROOT_USER')
MILVUS_PASSWORD = os.getenv('MILVUS_ROOT_PASSWORD')

# Django Milvus Search Configuration
MILVUS_CONFIG = {
    'host': MILVUS_HOST,
    'port': MILVUS_PORT,
    'max_connections': 8,
    'timeout': 60.0,
    'user': os.getenv('MILVUS_ROOT_USER'),  # Authentication username
    'password': os.getenv('MILVUS_ROOT_PASSWORD'),  # Authentication password
    'secure': False,  # Set to True for TLS connections
}

# Vector Search Settings
VECTOR_EMBEDDING_MODEL = 'all-MiniLM-L6-v2'
VECTOR_DIMENSION = 384
VECTOR_SEARCH_LIMIT = 10

# Google API Settings (for PDF text extraction using Gemini)
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY', '')  # Load from environment
GEMINI_MODEL = os.getenv('GEMINI_MODEL', 'gemini-1.5-flash')  # Model for PDF/image text extraction

# OpenAI API Settings
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')  # Load from environment
OPENAI_MODEL = os.getenv('OPENAI_MODEL', 'gpt-3.5-turbo')  # Model for content summarization
OPENAI_MAX_TOKENS = int(os.getenv('OPENAI_MAX_TOKENS', '150'))  # Maximum tokens for summary generation
OPENAI_TEMPERATURE = float(os.getenv('OPENAI_TEMPERATURE', '0.3'))  # Lower temperature for more focused summaries

# Logging Configuration with Timestamp-based Files
from datetime import datetime

LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)  # Ensure the logs directory exists

# Generate timestamp for log files (matches start_improved.sh pattern)
LOG_TIMESTAMP = datetime.now().strftime('%Y%m%d_%H%M%S')

# Get log file paths with timestamp (matches start_improved.sh pattern)
BACKEND_LOG_FILE = os.getenv('BACKEND_LOG_PATH', LOGS_DIR / f'backend_{LOG_TIMESTAMP}.log')
ERROR_LOG_FILE = os.getenv('ERROR_LOG_PATH', LOGS_DIR / f'error_log_{LOG_TIMESTAMP}.txt')
FRONTEND_LOG_FILE = LOGS_DIR / f'frontend_{LOG_TIMESTAMP}.log'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {name} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'backend_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BACKEND_LOG_FILE,
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 2,
            'formatter': 'verbose',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': ERROR_LOG_FILE,
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 2,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'backend_file', 'error_file'],
            'level': 'INFO',
            'propagate': True,
        },
        # Log messages from our specific apps
        'api': {
            'handlers': ['console', 'backend_file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'vector_search': {
            'handlers': ['console', 'backend_file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'users': {
            'handlers': ['console', 'backend_file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'templates': {
            'handlers': ['console', 'backend_file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'llm_eval': {
            'handlers': ['console', 'backend_file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'agent_orchestration': {
            'handlers': ['console', 'backend_file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django_milvus_search': {
            'handlers': ['console', 'backend_file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'project_api_keys': {
            'handlers': ['console', 'backend_file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Root logger to catch everything else
        '': {
            'handlers': ['console', 'backend_file', 'error_file'],
            'level': 'INFO',
        },
    },
}


