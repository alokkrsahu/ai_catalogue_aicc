<!-- WorkflowValidationPanel.svelte - Enhanced Validation Interface -->
<script lang="ts">
  import { createEventDispatcher } from 'svelte';
  import { toasts } from '$lib/stores/toast';
  import api from '$lib/services/api';
  
  export let workflow: any;
  export let project: any;
  export let nodes: any[] = [];
  export let edges: any[] = [];
  
  const dispatch = createEventDispatcher();
  
  // Validation state
  let validating = false;
  let validationResult: any = null;
  let lastValidationTime: Date | null = null;
  let showDetails = false;
  
  // Recommendations state
  let loadingRecommendations = false;
  let recommendations: any = null;
  
  $: hasValidationResult = validationResult !== null;
  $: isValid = validationResult?.validation?.is_valid || false;
  $: errorCount = validationResult?.validation?.errors?.length || 0;
  $: warningCount = validationResult?.validation?.warnings?.length || 0;
  
  async function validateWorkflow() {
    if (validating) return;
    
    try {
      validating = true;
      
      console.log('üîç VALIDATION: Starting workflow validation for', workflow.workflow_id);
      
      const workflowData = {
        project_id: project.project_id,
        workflow_id: workflow.workflow_id,
        graph_json: {
          nodes: nodes,
          edges: edges
        },
        supports_rag: project.processing_capabilities?.supports_rag || false,
        vector_collections: project.vector_collections || []
      };
      
      // Call the AICC-IntelliDoc-v2 template validation endpoint
      const response = await api.post(`/templates/aicc-intellidoc-v2/validate-workflow/`, workflowData);
      
      validationResult = response.data;
      lastValidationTime = new Date();
      
      console.log('‚úÖ VALIDATION: Completed successfully', validationResult);
      
      if (isValid) {
        toasts.success('‚úÖ Workflow validation passed!');
      } else {
        toasts.warning(`‚ö†Ô∏è Validation found ${errorCount} errors`);
      }
      
    } catch (error) {
      console.error('‚ùå VALIDATION: Failed:', error);
      toasts.error(`Validation failed: ${error.message}`);
      validationResult = null;
    } finally {
      validating = false;
    }
  }
  
  async function getRecommendations() {
    if (loadingRecommendations) return;
    
    try {
      loadingRecommendations = true;
      
      console.log('üí° RECOMMENDATIONS: Getting workflow recommendations');
      
      const workflowData = {
        project_id: project.project_id,
        workflow_id: workflow.workflow_id,
        graph_json: {
          nodes: nodes,
          edges: edges
        },
        supports_rag: project.processing_capabilities?.supports_rag || false,
        vector_collections: project.vector_collections || []
      };
      
      // Call the AICC-IntelliDoc-v2 template recommendations endpoint
      const response = await api.post(`/templates/aicc-intellidoc-v2/workflow-recommendations/`, workflowData);
      
      recommendations = response.data.recommendations;
      
      console.log('‚úÖ RECOMMENDATIONS: Received successfully', recommendations);
      toasts.success('üí° Recommendations loaded!');
      
    } catch (error) {
      console.error('‚ùå RECOMMENDATIONS: Failed:', error);
      toasts.error(`Failed to get recommendations: ${error.message}`);
    } finally {
      loadingRecommendations = false;
    }
  }
  
  function getValidationStatusIcon() {
    if (!hasValidationResult) return 'fa-question';
    if (isValid) return 'fa-check-circle';
    return 'fa-exclamation-triangle';
  }
  
  function getValidationStatusColor() {
    if (!hasValidationResult) return 'text-gray-500';
    if (isValid) return 'text-green-600';
    return 'text-red-600';
  }
  
  function getValidationStatusText() {
    if (!hasValidationResult) return 'Not validated';
    if (isValid) return 'Valid workflow';
    return `${errorCount} error${errorCount !== 1 ? 's' : ''} found`;
  }
</script>

<div class="workflow-validation-panel bg-white border border-gray-200 rounded-lg p-4">
  <!-- Header -->
  <div class="flex items-center justify-between mb-4">
    <div class="flex items-center space-x-3">
      <div class="w-8 h-8 bg-oxford-blue text-white rounded-lg flex items-center justify-center">
        <i class="fas fa-shield-alt text-sm"></i>
      </div>
      <div>
        <h3 class="font-semibold text-gray-900">Workflow Validation</h3>
        <p class="text-xs text-gray-600">Enhanced Workflow Validation</p>
      </div>
    </div>
    
    <div class="flex items-center space-x-2">
      {#if lastValidationTime}
        <span class="text-xs text-gray-500">
          Last: {lastValidationTime.toLocaleTimeString()}
        </span>
      {/if}
      
      <button
        class="px-3 py-1.5 bg-oxford-blue text-white rounded hover:bg-blue-700 transition-colors text-sm font-medium disabled:opacity-50 disabled:cursor-not-allowed"
        on:click={validateWorkflow}
        disabled={validating || nodes.length === 0}
      >
        {#if validating}
          <i class="fas fa-spinner fa-spin mr-1"></i>
          Validating...
        {:else}
          <i class="fas fa-check-double mr-1"></i>
          Validate
        {/if}
      </button>
    </div>
  </div>
  
  <!-- Validation Status -->
  <div class="bg-gray-50 rounded-lg p-4 mb-4">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-3">
        <i class="fas {getValidationStatusIcon()} text-lg {getValidationStatusColor()}"></i>
        <div>
          <div class="font-medium text-gray-900">{getValidationStatusText()}</div>
          {#if hasValidationResult}
            <div class="text-sm text-gray-600 mt-1">
              {nodes.length} agents ‚Ä¢ {edges.length} connections
              {#if warningCount > 0}
                ‚Ä¢ {warningCount} warning{warningCount !== 1 ? 's' : ''}
              {/if}
            </div>
          {/if}
        </div>
      </div>
      
      {#if hasValidationResult}
        <button
          class="text-sm text-oxford-blue hover:text-blue-700 font-medium"
          on:click={() => showDetails = !showDetails}
        >
          {showDetails ? 'Hide' : 'Show'} Details
          <i class="fas {showDetails ? 'fa-chevron-up' : 'fa-chevron-down'} ml-1"></i>
        </button>
      {/if}
    </div>
  </div>
  
  <!-- Validation Details -->
  {#if hasValidationResult && showDetails}
    <div class="space-y-4 mb-4">
      <!-- Errors -->
      {#if errorCount > 0}
        <div class="bg-red-50 border border-red-200 rounded-lg p-3">
          <div class="flex items-center mb-2">
            <i class="fas fa-exclamation-circle text-red-500 mr-2"></i>
            <span class="font-medium text-red-700">Errors ({errorCount})</span>
          </div>
          <ul class="text-sm text-red-700 space-y-1">
            {#each validationResult.validation.errors as error}
              <li class="flex items-start">
                <span class="mr-2">‚Ä¢</span>
                <span>{error}</span>
              </li>
            {/each}
          </ul>
        </div>
      {/if}
      
      <!-- Warnings -->
      {#if warningCount > 0}
        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
          <div class="flex items-center mb-2">
            <i class="fas fa-exclamation-triangle text-yellow-500 mr-2"></i>
            <span class="font-medium text-yellow-700">Warnings ({warningCount})</span>
          </div>
          <ul class="text-sm text-yellow-700 space-y-1">
            {#each validationResult.validation.warnings as warning}
              <li class="flex items-start">
                <span class="mr-2">‚Ä¢</span>
                <span>{warning}</span>
              </li>
            {/each}
          </ul>
        </div>
      {/if}
      
      <!-- Success State -->
      {#if isValid && errorCount === 0}
        <div class="bg-green-50 border border-green-200 rounded-lg p-3">
          <div class="flex items-center">
            <i class="fas fa-check-circle text-green-500 mr-2"></i>
            <span class="font-medium text-green-700">Workflow is valid and ready for execution</span>
          </div>
        </div>
      {/if}
    </div>
  {/if}
  
  <!-- Recommendations Section -->
  <div class="border-t border-gray-200 pt-4">
    <div class="flex items-center justify-between mb-3">
      <div class="flex items-center space-x-2">
        <i class="fas fa-lightbulb text-yellow-500"></i>
        <span class="font-medium text-gray-900">Optimization Recommendations</span>
      </div>
      
      <button
        class="px-3 py-1.5 bg-gray-100 text-gray-700 rounded hover:bg-gray-200 transition-colors text-sm font-medium disabled:opacity-50 disabled:cursor-not-allowed"
        on:click={getRecommendations}
        disabled={loadingRecommendations || nodes.length === 0}
      >
        {#if loadingRecommendations}
          <i class="fas fa-spinner fa-spin mr-1"></i>
          Loading...
        {:else}
          <i class="fas fa-magic mr-1"></i>
          Get Recommendations
        {/if}
      </button>
    </div>
    
    {#if recommendations}
      <div class="bg-blue-50 border border-blue-200 rounded-lg p-3">
        {#if recommendations.actionable_recommendations && recommendations.actionable_recommendations.length > 0}
          <ul class="text-sm text-blue-700 space-y-2">
            {#each recommendations.actionable_recommendations as recommendation}
              <li class="flex items-start">
                <i class="fas fa-arrow-right text-blue-500 mr-2 mt-0.5 text-xs"></i>
                <span>{recommendation}</span>
              </li>
            {/each}
          </ul>
        {:else}
          <div class="flex items-center text-blue-700">
            <i class="fas fa-thumbs-up mr-2"></i>
            <span class="font-medium">No recommendations - workflow is well optimized!</span>
          </div>
        {/if}
        
        {#if recommendations.validation_report}
          <div class="mt-3 pt-3 border-t border-blue-200">
            <div class="grid grid-cols-2 gap-4 text-xs text-blue-600">
              <div>
                <span class="font-medium">Complexity:</span>
                <span class="capitalize">{recommendations.validation_report.statistics?.complexity_score || 'N/A'}</span>
              </div>
              <div>
                <span class="font-medium">Orchestration Compatible:</span>
                <span class="{recommendations.validation_report.statistics?.orchestration_compatibility ? 'text-green-600' : 'text-red-600'}">
                  {recommendations.validation_report.statistics?.orchestration_compatibility ? 'Yes' : 'No'}
                </span>
              </div>
            </div>
          </div>
        {/if}
      </div>
    {/if}
  </div>
  
  <!-- Quick Actions -->
  {#if nodes.length === 0}
    <div class="mt-4 p-3 bg-gray-50 rounded-lg border border-gray-200">
      <div class="flex items-center text-gray-600">
        <i class="fas fa-info-circle mr-2"></i>
        <span class="text-sm">Add agents to your workflow to enable validation</span>
      </div>
    </div>
  {:else if !hasValidationResult}
    <div class="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
      <div class="flex items-center text-blue-700">
        <i class="fas fa-play-circle mr-2"></i>
        <span class="text-sm font-medium">Ready for validation - click "Validate" to check your workflow</span>
      </div>
    </div>
  {/if}
</div>

<style>
  :global(.oxford-blue) {
    color: #002147;
  }
  
  :global(.bg-oxford-blue) {
    background-color: #002147;
  }
  
  .workflow-validation-panel {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  }
</style>