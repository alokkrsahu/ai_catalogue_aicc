services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai_catalogue_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-ai_catalogue_db}
      POSTGRES_USER: ${DB_USER:-ai_catalogue_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ai_catalogue_password}
      POSTGRES_HOST_AUTH_METHOD: ${DB_AUTH_METHOD:-md5}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-ai_catalogue_user} -d ${DB_NAME:-ai_catalogue_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ai_catalogue_network

  # Milvus Vector Database Components
  etcd:
    container_name: ai_catalogue_etcd
    image: quay.io/coreos/etcd:v3.5.12
    restart: unless-stopped
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ai_catalogue_network

  minio:
    container_name: ai_catalogue_minio
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    restart: unless-stopped
    environment:
      # MinIO root credentials (from .env file)
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 5
    networks:
      - ai_catalogue_network

  milvus:
    container_name: ai_catalogue_milvus
    image: milvusdb/milvus:v2.6.0
    restart: unless-stopped
    command: ["milvus", "run", "standalone"]
    environment:
      # Use etcd for coordination
      ETCD_ENDPOINTS: etcd:2379
      # Use local storage instead of MinIO for ARM64 compatibility
      MINIO_ADDRESS: ""
      COMMON_STORAGETYPE: local
      # Enable Milvus authentication
      COMMON_SECURITY_AUTHORIZATIONENABLED: "true"
      # Milvus root credentials (from .env file)
      MILVUS_ROOT_USER: ${MILVUS_ROOT_USER}
      MILVUS_ROOT_PASSWORD: ${MILVUS_ROOT_PASSWORD}
      # Additional security configuration
      COMMON_SECURITY_TLSMODE: 0
      # Local storage configuration
      LOCAL_STORAGE_PATH: /var/lib/milvus/data
    volumes:
      - milvus_data:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      etcd:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 20s
      retries: 20
      start_period: 120s
    networks:
      - ai_catalogue_network

  # ChromaDB Vector Database (for Public Chatbot)
  chromadb:
    image: chromadb/chroma:1.0.20
    container_name: ai_catalogue_chromadb
    restart: unless-stopped
    ports:
      - "${CHROMADB_PORT:-8001}:8000"
    environment:
      CHROMA_SERVER_HOST: "0.0.0.0"
      CHROMA_SERVER_PORT: "8000"
      CHROMA_SERVER_CORS_ALLOW_ORIGINS: '["*"]'
    volumes:
      - chromadb_data:/chroma/chroma
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - ai_catalogue_network

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai_catalogue_backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Override container-specific settings
      DB_HOST: postgres
      MILVUS_HOST: milvus
      REDIS_HOST: redis
      MINIO_HOST: minio
      
      # Default values for development (override via .env for production)
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DB_NAME: ${DB_NAME:-ai_catalogue_db}
      DB_USER: ${DB_USER:-ai_catalogue_user}
      DB_PASSWORD: ${DB_PASSWORD:-ai_catalogue_password}
      DB_PORT: ${DB_PORT:-5432}
      
      MILVUS_PORT: ${MILVUS_PORT:-19530}
      MILVUS_ROOT_USER: ${MILVUS_ROOT_USER}
      MILVUS_ROOT_PASSWORD: ${MILVUS_ROOT_PASSWORD}
      
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-your-super-secret-key-change-in-production}
      DEBUG: ${DEBUG:-True}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS:-localhost,127.0.0.1,backend,frontend,ai_catalogue_backend,frontend-dev,ai_catalogue_frontend_dev}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:5173,http://localhost:3000}
      CSRF_TRUSTED_ORIGINS: ${CSRF_TRUSTED_ORIGINS:-http://localhost:5173,http://localhost:3000}
      
      # API Keys
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      
      # Public Chatbot API Keys (isolated from main system)
      AICC_CHATBOT_OPENAI_API_KEY: ${AICC_CHATBOT_OPENAI_API_KEY:-}
      
      # ChromaDB Configuration (for Public Chatbot)
      CHROMADB_HOST: chromadb
      CHROMADB_PORT: 8000
      
      # Security Configuration
      # CRITICAL: PROJECT_API_KEY_ENCRYPTION_KEY must be set in .env file
      # This key encrypts/decrypts project-specific API keys stored in database
      PROJECT_API_KEY_ENCRYPTION_KEY: ${PROJECT_API_KEY_ENCRYPTION_KEY}
      
      # General API Key Encryption (legacy - for backwards compatibility)
      API_KEY_ENCRYPTION_KEY: ${API_KEY_ENCRYPTION_KEY:-BvAnyMC4-7_2oomBc_PT5lfmZN_LGisAdcvSF1EOAPQ=}
      
      # Performance
      TOKENIZERS_PARALLELISM: ${TOKENIZERS_PARALLELISM:-false}
      PYTORCH_ENABLE_MPS_FALLBACK: ${PYTORCH_ENABLE_MPS_FALLBACK:-1}
      CUDA_VISIBLE_DEVICES: ${CUDA_VISIBLE_DEVICES:-}
    ports:
      - "8000:8000"
    volumes:
      - backend_media:/app/media
      - backend_logs:/app/logs
      - milvus_volumes:/app/volumes
    depends_on:
      postgres:
        condition: service_healthy
      milvus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - ai_catalogue_network

  # SvelteKit Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai_catalogue_frontend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${FRONTEND_PORT:-3000}
      # Backend API endpoint for SvelteKit server-side calls
      BACKEND_URL: ${BACKEND_URL:-http://backend:8000}
      VITE_BACKEND_URL: ${VITE_BACKEND_URL:-http://localhost:8000}
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:8000/api}
    ports:
      - "${FRONTEND_PORT:-3000}:${FRONTEND_PORT:-3000}"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${FRONTEND_PORT:-3000}/"]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - ai_catalogue_network

  # Nginx Reverse Proxy (Optional but recommended for production)
  nginx:
    image: nginx:alpine
    container_name: ai_catalogue_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - ai_catalogue_network

  # Optional: PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ai_catalogue_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: ${PGADMIN_SERVER_MODE:-False}
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ai_catalogue_network

  # Attu - Milvus Web UI with Manual Authentication
  attu:
    image: zilliz/attu:latest
    container_name: ai_catalogue_attu
    restart: unless-stopped
    environment:
      # No embedded credentials - users must authenticate manually
      HOST_URL: ${ATTU_HOST_URL:-http://localhost:3001}
    ports:
      - "${ATTU_PORT:-3001}:3000"
    depends_on:
      milvus:
        condition: service_healthy
    networks:
      - ai_catalogue_network

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  etcd_data:
    driver: local
  minio_data:
    driver: local
  milvus_data:
    driver: local
  milvus_volumes:
    driver: local
  backend_media:
    driver: local
  backend_logs:
    driver: local
  chromadb_data:
    driver: local

networks:
  ai_catalogue_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16